# Cell Trail Workflow
library(CellTrails)
library(Seurat)
library(SingleCellExperiment)
library(tidyverse)
Path <- "C:/Users/yosueda/Documents/RStudio/"
Proj <- "SOX2 project/Combine"
dim=9;res=0.5

# Load 10X data in Seurat objects
dayall <- readRDS(paste0(Path, Proj, "/Output/day2030405060_", toString(dim), "_" , toString(res), ".rds"))

#CellTrails is slow, so I've downsampled to 9000 cells for a trial run
seurat.obj <- subset(dayall, cells = sample(Cells(dayall), 9000))

#Convert to SingleCellExperiment object ("data")
data <- as.SingleCellExperiment(seurat.obj, assay = "RNA"); gc();gc()

rm(dayall, seurat.obj);gc();gc()

# Convert assay data from dgCMatrix (sparse matrix format) to regular matrix
counts(data) <- NULL                                                # delete raw count
data@assays@data$logcounts <- as.matrix(data@assays@data$logcounts) # 
rowData(data)$feature_symbol <- rownames(data)                      # assign gene names

#Select most variable features
trajFeatureNames(data) <- filterTrajFeaturesByDL(data, threshold=100, show_plot = T); showTrajInfo(data); gc(); gc()
trajFeatureNames(data) <- filterTrajFeaturesByCOV(data, threshold=0.5, show_plot = T); showTrajInfo(data); gc(); gc()
trajFeatureNames(data) <- tfeat <- filterTrajFeaturesByFF(data, threshold=1.7, show_plot = T); showTrajInfo(data); gc(); gc()
#Create data subset containing only the most variable features
data.sub <- data[tfeat, ]

rownames(data.sub)

# saveRDS(data, paste0(Path, Proj, "/CellTrails/Output/20211208/data_postfiltering_full.rds"))
# saveRDS(data.sub, paste0(Path, Proj, "/CellTrails/Output/20211208/data_sub_postfiltering_full.rds"))

library(CellTrails)

# print("library loaded")

# data <- readRDS("/geode2/home/u110/yosueda/Quartz/Documents/R/SOX2/Output/20211208/data_postfiltering_full.rds")
# data.sub <- readRDS("/geode2/home/u110/yosueda/Quartz/Documents/R/SOX2/Output/20211208/data_sub_postfiltering_full.rds")

# print("data loaded")

#Perform dimensional reduction
se <- embedSamples(data.sub)

print("embedSamples done")

d <- findSpectrum(se$eigenvalues, frac = 100)
latentSpace(data) <- se$components[ , d]

saveRDS(data, paste0(Path, Proj, "/CellTrails/Output/20211209/postembedSamples_9k.rds"))

data <- data.b

# states(data) <- findStates(data, min_size=0.01, min_feat=5, max_pval=1e-4, min_fc=2) # 35 state, looks fine
# states(data) <- findStates(data, min_size=0.01, min_feat=10, max_pval=1e-5, min_fc=2) # 28 states
# states(data) <- findStates(data, min_size=0.02, min_feat=20, max_pval=1e-5, min_fc=2) # 8 states
# states(data) <- findStates(data, min_size=0.01, min_feat=20, max_pval=1e-5, min_fc=2) # 11 states
# states(data) <- findStates(data, min_size=0.01, min_feat=20, max_pval=1e-4, min_fc=1.5) # 28 states
# states(data) <- findStates(data, min_size=0.01, min_feat=20, max_pval=1e-4, min_fc=1.8) # 19 states
states(data) <- findStates(data, min_size=0.01, min_feat=20, max_pval=1e-5, min_fc=1.7) # 18 states

#saveRDS(data, paste0(Path, Proj, "/CellTrails/Output/20211208/data_postfiltering_full.rds"))
#saveRDS(data.sub, paste0(Path, Proj, "/CellTrails/Output/20211208/data_sub_postfiltering_full.rds"))

#DimPlot Equivalent
plotManifold(data, color_by = "phenoName", name = "state") #State is CellTrail's version of clusters
plotManifold(data, color_by = "phenoName", name = "seurat_clusters")
gp <- plotManifold(data, color_by="featureName", name="PAX2", recalculate=TRUE) +
  scale_shape_manual(values = 16) +
  scale_fill_manual(values = c("#a380e5","#9974e8","#8f67ec","#845aef","#774df2","#683ff6","#5630f9","#3d1efc","#0000ff")) + 
  geom_point(shape = 16, color = "gray90", stroke = F, size = 3, alpha = 0.5) +
  theme(panel.background = element_rect(fill = "#ffffff")) 
gp

#List available "phenotype" labes (Basically, metadata)
phenoNames(data)

# saveRDS(data, "/geode2/home/u110/yosueda/Quartz/Documents/R/SOX2/Output/20211208/data_postembedSamles_full.rds")
# saveRDS(data.sub, "/geode2/home/u110/yosueda/Quartz/Documents/R/SOX2/Output/20211208/data_sub_postembedSamples_full.rds")

# Store tSNE result
manifold2D(data) <- gp

# Plot scater PCA with CellTrails cluster information
scater::plotPCA(data, colour_by="CellTrails.state")

#### TRAJECTORY ####

data <- connectStates(data, l=5)

# Show trajectory information
# showTrajInfo(data)
# trajComponents(data)

gp <- plotStateTrajectory(data, color_by="phenoName", name="state", 
                          component=1, point_size=1.5, label_offset=4, 
                          recalculate=TRUE)
gp

# Store layout
stateTrajLayout(data) <- gp

# Each exoression
plotStateTrajectory(data, color_by="featureName", name="UBE2C", component=1, point_size=8)
plotStateTrajectory(data, color_by="featureName", name="PAX2", component=1, point_size=8)
plotStateTrajectory(data, color_by="featureName", name="FBXO2", component=1, point_size=8)
plotStateTrajectory(data, color_by="featureName", name="ELAVL4",component=1, point_size=8)
plotStateTrajectory(data, color_by="featureName", name="S100B", component=1, point_size=8)
plotStateTrajectory(data, color_by="featureName", name="OC90", component=1, point_size=8)
plotStateTrajectory(data, color_by="featureName", name="SPARCL1", component=1, point_size=8)
plotStateTrajectory(data, color_by="featureName", name="PCP4", component=1, point_size=8)

data <- selectTrajectory(data, component=1)

# Subset SingleCellExperiment object by
# trajectory sample names
data_subset <- data[, trajSampleNames(data)]

# Plot state sizes
plotStateSize(data_subset)

# Align samples onto trajectory
data <- fitTrajectory(data)
showTrajInfo(data)

trajResiduals(data)[1:10]

plotTrajectoryFit(data)

#data <- data.c

#### CELLTRAILS MAP ####

# Export trajectory graph structure to graphml
# Color and label nodes by state
write.ygraphml(data,
               file=paste0(Path, Proj, "/CellTrails/Output/20211210/SCT_9000.graphml"),
               color_by='phenoName',
               name='state',
               node_label='state')

## EDIT TRAJECTORY by yEd ##

tl <- read.ygraphml(paste0(Path, Proj, "/CellTrails/Output/20211210/SCT_9000_ed.graphml"))

# Plot layout
plot(tl[,1:2], axes=FALSE, xlab="", ylab="", pch=20, cex=.25)

# Adjust layout and store to object
trajLayout(data, adjust=TRUE) <- tl

showTrajInfo(data)

# Plot adjusted layout
plot(trajLayout(data), axes=FALSE, xlab="", ylab="", pch=20, cex=.25)

plotMap(data, color_by="phenoName", name="ident")

plotMap(data, color_by="featureName", name="UBE2C", type="surface.fit")

plotMap(data, color_by="featureName", name="PAX2", type="surface.fit")
plotMap(data, color_by="featureName", name="FBXO2", type="surface.fit")
plotMap(data, color_by="featureName", name="HES1", type="surface.fit")
plotMap(data, color_by="featureName", name="BRICD5", type="surface.fit")
plotMap(data, color_by="featureName", name="SPARCL1", type="surface.fit")
plotMap(data, color_by="featureName", name="TMOD1", type="surface.fit")
plotMap(data, color_by="featureName", name="OC90", type="surface.fit")
plotMap(data, color_by="featureName", name="AGR2", type="surface.fit")

plotMap(data, color_by="featureName", name="ATOH1", type="surface.fit")
plotMap(data, color_by="featureName", name="PCP4", type="surface.fit")
plotMap(data, color_by="featureName", name="POU4F3", type="surface.fit")

plotMap(data, color_by="featureName", name="ELAVL4", type="surface.fit")

plotMap(data, color_by="featureName", name="S100B", type="surface.fit")
plotMap(data, color_by="featureName", name="TPM1", type="surface.fit")

# Raw
plotMap(data, color_by="featureName", name="FBXO2", type="raw")

# Smoothed
plotMap(data, color_by="featureName", name="FBXO2", type="surface.fit", 
        samples_only=TRUE)

#### Expression Dynamics  ####
plotMap(data, color_by="phenoName", name="landmark")

# Define trails
data <- addTrail(data, from="H16", to="H17", name="HC")
data <- addTrail(data, from="H16", to="H27", name="SC")
data <- addTrail(data, from="H16", to="H12", name="SC.2")
data <- addTrail(data, from="H16", to="H22", name="Nn")
data <- addTrail(data, from="H16", to="H4", name="Gl")

showTrajInfo(data)

plotTrail(data, name="HC")
plotTrail(data, name="SC")
plotTrail(data, name="SC.2")
plotTrail(data, name="Nn")
plotTrail(data, name="Gl")

# Get trail names
trailNames(data)

# Get trail pseudotime
trails(data)[1:5, ]

# Get trail names
plotManifold(data, color_by="phenoName", name="HC")
plotManifold(data, color_by="phenoName", name="SC")
plotManifold(data, color_by="phenoName", name="SC.2")
plotManifold(data, color_by="phenoName", name="Nn")
plotManifold(data, color_by="phenoName", name="Gl")

# Plot scater PCA with CellTrails pseudotime information
scater::plotPCA(data, colour_by="CellTrails.HC")
scater::plotPCA(data, colour_by="CellTrails.SC")
scater::plotPCA(data, colour_by="CellTrails.SC.2")
scater::plotPCA(data, colour_by="CellTrails.Nn")
scater::plotPCA(data, colour_by="CellTrails.Gl")

# write.ygraphml(data, file=paste0(Path, Proj, "/CellTrails/Output/20211209/SCT_9000_2.graphml"), name='landmark')
# 
# write.ygraphml(data,
#                file=paste0(Path, Proj, "/CellTrails/Output/data_10000_3.graphml"),
#                color_by='phenoName',
#                name='state',
#                node_label='state')


# #### Extract pseudotime of HC ####
# ptime <- trails(data)[, "HC"]
# 
# # Subset SingleCellExperiment set
# # to samples which are part of trail HC
# HC <- data[, !is.na(ptime)]
# 
# # Order samples by pseudotime
# o <- order(trails(HC)[, "HC"])
# HC <- HC[, o]
# ptime <- trails(HC)[, "HC"]
# names(ptime) <- colnames(HC)
# 
# # Lagged pseudotime values per state
# ptime_states <- split(ptime, states(HC))
# lptime <- lapply(ptime_states, 
#                  function(x){y <- diff(sort(x)); y[-length(y)]})
# 
# bp <- boxplot(lptime, horizontal=TRUE, 
#               ylab="State", xlab="Pseudotime delta", las=2)
# 
# leap <- lptime$S7[which.max(lptime$S7) - 1]
# names(leap)
# 
# #### Extract pseudotime of SC ####
# ptime <- trails(data)[, "SC"]

plotDynamic(data, feature_name=c("PAX2", "FBXO2","LMO7","ATOH1","POU4F3","MYO15A","MYO7A"), trail_name="HC")
plotDynamic(data, feature_name=c("UBE2C","TOP2A","HES6","MKI67","MYO6","PCP4"), trail_name="HC")

plotDynamic(data, feature_name=c("UBE2C","TOP2A","MKI67","WFDC2"), trail_name="SC")
plotDynamic(data, feature_name=c("PAX2", "FBXO2","BRICD5","OTOL1","SPARCL1","USH1C","KRT18"), trail_name="SC")

plotDynamic(data, feature_name=c("UBE2C","TOP2A","MKI67","WFDC2","OTOL1"), trail_name="SC.2")
plotDynamic(data, feature_name=c("PAX2", "FBXO2","BRICD5","SPARCL1","USH1C","KRT18"), trail_name="SC.2")

plotDynamic(data, feature_name="FBXO2", trail_name="SC")
plotDynamic(data, feature_name="PAX2", trail_name="SC")



plotDynamic(data, feature_name=c("UBE2C","TOP2A","MKI67","DCX","ELAVL4",
                                 "NEUROD1","NEFM","POU4F1","GAP43","SST"), trail_name="Nn")
plotDynamic(data, feature_name=c("UBE2C","TOP2A","MKI67","S100B"), trail_name="Gl")
plotDynamic(data, feature_name=c("SOX10","PMP22","PTPRZ1","MPZ"), trail_name="Gl")

saveRDS(data, paste0(Path, Proj, "/CellTrails/Output/20211209/postembedSamples_9k_20211210.rds"))
